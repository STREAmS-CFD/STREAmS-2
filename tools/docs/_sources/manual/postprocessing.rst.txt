===================================
Post-processing data
===================================

-------------------------------------
Plotting 3D data
-------------------------------------

Three dimensional flow fields are stored in Plot3D and/or VTK format and can be visualized
using Paraview, or Tecplot.

-------------------------------------
Post-processing flow statistics
-------------------------------------
Mean flow statics are stored in raw format in the file `stat.bin`.
To post-process it, use the post-processing program available in the folder ``tools/postpro``.
Compile the tool by typing,

.. code-block:: console

   $ make

This will produce the executable `postpro.exe`. 
An input file `postpro.ini` with the following variables is necessary for all flow cases.

^^^^^^^^^^^^^^^^
postpro.ini
^^^^^^^^^^^^^^^^
- ``recompute_avg``    => integer, when recompute_avg=0 use averages calculated at runtime (in time and homogeneous spatial directions), when recompute_avg=1 calculate the time-averaged flow statistics starting from the spanwise 
  averaged planes contained in the folder ``AVGZ``. For channel flow cases statistics are also averaged in the streamwise direction.
- ``it_start``         => integer, starting index of the spanwise averaged planes in ``AVGZ`` for computing the time averaged statistics 
- ``it_end``           => integer, starting index of the spanwise averaged planes in ``AVGZ`` for computing the time averaged statistics 
- ``it_out``           => integer, skip index of the spanwise averaged planes in ``AVGZ`` for computing the time averaged statistics. Uses every ``it_out`` plane to calculate the time-averaged flow statistics 
- ``save_plot3d``      => integer, when save_plot3d=1 saves 2D mean flow in plot3d format 
- ``plot3d_vars``   => integer, determines what variables are stored in the plot3D files (example: plot3d_vars = 1,2,3,4,13). 70 variables can be be printed:  

 - 1: :math:`\langle \rho \rangle`
 - 2: :math:`\langle u \rangle`
 - 3: :math:`\langle v \rangle`
 - 4: :math:`\langle w \rangle`
 - 5: :math:`\langle p \rangle`
 - 6: :math:`\langle T \rangle`
 - 7: :math:`\langle \rho^2 \rangle`
 - 8: :math:`\langle u^2 \rangle`
 - 9: :math:`\langle v^2 \rangle`
 - 10: :math:`\langle w^2 \rangle`
 - 11: :math:`\langle p^2 \rangle`
 - 12: :math:`\langle T^2 \rangle`
 - 13: :math:`\langle \rho u \rangle`
 - 14: :math:`\langle \rho v \rangle`
 - 15: :math:`\langle \rho w \rangle`
 - 16: :math:`\langle \rho u u \rangle`
 - 17: :math:`\langle \rho v v \rangle`
 - 18: :math:`\langle \rho w w \rangle`
 - 19: :math:`\langle \rho u v \rangle`
 - 20: :math:`\langle \mu \rangle`
 - 21: :math:`\langle \nu \rangle`
 - 22: :math:`\langle \omega_x^2 \rangle`
 - 23: :math:`\langle \omega_y^2 \rangle`
 - 24: :math:`\langle \omega_z^2 \rangle`
 - 25: :math:`\langle \rho T \rangle`
 - 26: :math:`\langle \rho T^2 \rangle`
 - 27: :math:`\langle T_{0} \rangle`
 - 28: :math:`\langle \rho T_{0} \rangle`
 - 29: :math:`\langle T_{0}^2 \rangle`
 - 30: :math:`\langle \rho u T \rangle`
 - 31: :math:`\langle \rho v T \rangle`
 - 32: :math:`\langle \rho w T \rangle`
 - 33: :math:`\langle Mach \rangle`
 - 34: :math:`\langle Mach^2 \rangle`
 - 35: :math:`\langle \rho u u^2 \rangle`
 - 36: :math:`\langle \rho v u^2 \rangle`
 - 37: :math:`\langle \rho u v^2 \rangle`
 - 38: :math:`\langle \rho v v^2 \rangle`
 - 39: :math:`\langle \rho u w^2 \rangle`
 - 40: :math:`\langle \rho v w^2 \rangle`
 - 41: :math:`\langle p u \rangle`
 - 42: :math:`\langle p v \rangle`
 - 43: :math:`\langle \sigma_{11} \rangle`
 - 44: :math:`\langle \sigma_{12} \rangle`
 - 45: :math:`\langle \sigma_{13} \rangle`
 - 46: :math:`\langle \sigma_{22} \rangle`
 - 47: :math:`\langle \sigma_{23} \rangle`
 - 48: :math:`\langle \sigma_{33} \rangle`
 - 49: :math:`\langle \sigma_{11} u \rangle`
 - 50: :math:`\langle \sigma_{12} u \rangle`
 - 51: :math:`\langle \sigma_{21} v \rangle`
 - 52: :math:`\langle \sigma_{22} v \rangle`
 - 53: :math:`\langle \sigma_{31} w \rangle`
 - 54: :math:`\langle \sigma_{32} w \rangle`
 - 55: :math:`\langle \sigma_{11} v + \sigma_{21} u \rangle`
 - 56: :math:`\langle \sigma_{12} v + \sigma_{22} u \rangle`
 - 57: :math:`\langle \sigma_{11} u_x + \sigma_{12} u_y + \sigma_{13} u_z \rangle`
 - 58: :math:`\langle \sigma_{21} v_x + \sigma_{22} v_y + \sigma_{23} v_z \rangle`
 - 59: :math:`\langle \sigma_{31} w_x + \sigma_{32} w_y + \sigma_{33} w_z \rangle`
 - 60: :math:`\langle \sigma_{11} v_x + \sigma_{12} (u_x + v_y) + \sigma_{22} u_y + \sigma_{13} w_z + \sigma_{23} u_z \rangle`
 - 61: :math:`\langle p u_x \rangle`
 - 62: :math:`\langle p v_y \rangle`
 - 63: :math:`\langle p w_z \rangle`
 - 64: :math:`\langle p (u_y + v_x) \rangle`
 - 65: :math:`\langle (\nabla \cdot \mathbf{u})^2 \rangle`
 - 66: :math:`\langle \rho T^2 T \rangle`
 - 67: :math:`\langle \rho T^4 \rangle`
 - 68: :math:`\langle \rho u^3 \rangle`
 - 69: :math:`\langle c_p \rangle`
 - 70: :math:`\langle \gamma \rangle`

- ``ixstat``   => list of integers, global mesh indices at which extract boundary layer profiles. Meaningful for boundary layer and airfoil flow cases.
- ``stat_0_1``   => integer, only meaningful when ``io_type_w == 1``. When stat_0_1=0 the postprocessing tool reads statistics from the previous run , when stat_0_1=1 reads statistics from latest run 
- ``npoints_bl`` => integer, only meaningful for curved boundary layers and airfoils. Number of points to be used for extracting
- ``ix_out, ix_ramp_skip`` => integers, only meaningful for curved boundary layers. Prints boundary layer wall quantities between ix_ramp_skip and nx-ix_ramp_skip every ix_out points.



Different files will be printed depending on the flow case that has been run. 

-------------
Flow cases
-------------

^^^^^^^^^^^^^^^^
Channel flow
^^^^^^^^^^^^^^^^

Make sure that the file `postpro.ini` is present in the run folder and all the parameters have been set correctly.
Copy the executable `postpro.exe` to the case folder you want to post-process and run: 

.. code-block:: console

   $ ./postpro.exe

This will print the post-processed flow statistics in the folder ``POSTPRO/``, 
which will contain the files ``channinfo.dat`` and ``channstat.prof``

&&&&&&&&&&&&&&&&
channinfo.dat
&&&&&&&&&&&&&&&&
The file ``channinfo.dat`` contains 

- :math:`Re_\tau=u_\tau h/\nu_w`, friction Reynolds number, where :math:`h` is the channel half width and :math:`\nu_w` the kinematic viscosity at the wall
- :math:`\overline{\rho}_w` mean wall density
- :math:`u_\tau/u_b`, ratio between friction and bulk flow velocity
- :math:`C_f=2\overline{\tau}_w/(\rho_b u_b^2)` skin-friction coefficient based on the mean wall shear stress, bulk flow velocity and bulk fluid density

&&&&&&&&&&&&&&&&
channstat.prof
&&&&&&&&&&&&&&&&
The file ``channstat.prof`` contains mean profiles of channel flow in the following format:

1. :math:`y/h,\quad` wall-normal coordinate normalized with the channel half width
2. :math:`\overline{\rho}/\rho_b,\quad` mean density normalized by bulk density 
3. :math:`\widetilde{u}/u_b,\quad` Mean Favre velocity normalized by bulk velocity 
4. :math:`\overline{T}/T_w,\quad` mean temperature normalized by the wall temperature
5. :math:`\overline{p}/(\rho_bu_b^2),\quad` mean pressure normalized by twice the dynamic pressure
6. :math:`\overline{\mu}/\mu_w,\quad` mean viscosity normalized by the wall viscosity
7. :math:`y^+,\quad` wall-normal coordinate in viscous units
8. :math:`y_{TL}^+,\quad` wall-normal coordinate transformed according to Trettel & Larsson :cite:p:`Trettel2016` in viscous units (equivalent to `y^*\quad` semi-local scaling)
9. :math:`y_{V}^+,\quad` wall-normal coordinate transformed according to Volpiani et al. :cite:p:`Volpiani2020` in viscous units 
10. :math:`u^+,\quad` mean streamwise velocity in viscous units
11. :math:`u_{VD}^+,\quad` mean streamwise velocity transformed according to van Driest :cite:p:`vanDriest1955` in viscous units
12. :math:`u_{TL}^+,\quad` mean streamwise velocity transformed according to Trettel & Larsson :cite:p:`Trettel2016` in viscous units
13. :math:`u_{V}^+,\quad` mean streamwise velocity transformed according to Volpiani *et al.* :cite:p:`Volpiani2020` in viscous units
14. :math:`u_{G}^+,\quad` mean streamwise velocity transformed according to Griffin *et al.* :cite:p:`griffin_21` in viscous units
15. :math:`u_{H}^+,\quad` mean streamwise velocity transformed according to Hasan *et al.* :cite:p:`hasan_23` in viscous units
16. :math:`y^+du_{VD}^+/dy_{VD}^+,\quad` van Driest indicator function
17. :math:`y_{TL}^+du_{TL}^+/dy_{TL}^+,\quad` Trettel & Larsson log indicator function
18. :math:`y_V^+du_{V}^+/dy_V^+,\quad` Volpiani log indicator function
19. :math:`y_G^+du_{G}^+/dy_G^+,\quad` Griffin *et al.* log indicator function
20. :math:`y_H^+du_{H}^+/dy_H^+,\quad` Hasan *et al.* log indicator function
21. :math:`\overline{\tau}_{11}/\tau_w,\quad` normal Reynolds stress component 11, scaled by density, in viscous units
22. :math:`\overline{\tau}_{22}/\tau_w,\quad` normal Reynolds stress component 22, scaled by density, in viscous units 
23. :math:`\overline{\tau}_{33}/\tau_w,\quad` normal Reynolds stress component 33, scaled by density, in viscous units
24. :math:`\overline{\tau}_{12}/\tau_w,\quad` Reynolds shear stress component 12, scaled by density, in viscous units
25. :math:`\overline{\rho}_{rms}/(\rho_w\gamma M_\tau^2),\quad` Density rms normalized by wall density and friction Mach number 
26. :math:`\overline{T_{rms}}/(\rho_w\gamma M_\tau^2),\quad` Temperature rms normalized by wall temperature and friction Mach number 
27. :math:`\overline{p_{rms}}/\tau_w,\quad` pressure rms normalized by wall shear stress

^^^^^^^^^^^^^^^^^^^
Curved Channel flow
^^^^^^^^^^^^^^^^^^^

Make sure that the file `postpro.ini` is present in the run folder and all the parameters have been set correctly.
Copy the executable `postpro.exe` to the case folder you want to post-process and run: 

.. code-block:: console

   $ ./postpro.exe

This will print the post-processed flow statistics in the folder ``POSTPRO/``, 
which will contain the files ``channinfo_concave.dat``, ``channinfo_convex.dat``, ``channstat_concave.prof``, ``channstat_convex.prof`` and ``channstat_global.prof``, referring to the concave side, concave side, or to the two walls.

&&&&&&&&&&&&&&&&
channinfo_*.dat
&&&&&&&&&&&&&&&&

The files ``channinfo_*.dat`` contain

- :math:`Re_\tau=u_\tau h/\nu_w`, friction Reynolds number, where :math:`h` is the channel half width and :math:`\nu_w` the kinematic viscosity at the wall
- :math:`\overline{\rho}_w` mean wall density
- :math:`u_\tau/u_b`, ratio between friction and bulk flow velocity
- :math:`C_f=2\overline{\tau}_w/(\rho_b u_b^2)` skin-friction coefficient based on the mean wall shear stress, bulk flow velocity and bulk fluid density

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
channstat_concave/convex.prof
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

The files ``channstat_concave.prof`` and ``channstat_convex.prof`` contain mean profiles of channel flow in the following format:

1. :math:`y/h,\quad` wall-normal coordinate normalized with the channel half width
2. :math:`\overline{\rho}/\rho_b,\quad` mean density normalized by bulk density 
3. :math:`\widetilde{u}/u_b,\quad` Mean Favre velocity normalized by bulk velocity 
4. :math:`\overline{T}/T_w,\quad` mean temperature normalized by the wall temperature
5. :math:`\overline{p}/(\rho_bu_b^2),\quad` mean pressure normalized by twice the dynamic pressure
6. :math:`\overline{\mu}/\mu_w,\quad` mean viscosity normalized by the wall viscosity
7. :math:`y^+,\quad` wall-normal coordinate in viscous units
8. :math:`y_{TL}^+,\quad` wall-normal coordinate transformed according to Trettel & Larsson :cite:p:`Trettel2016` in viscous units (equivalent to `y^*\quad` semi-local scaling)
9. :math:`y_{V}^+,\quad` wall-normal coordinate transformed according to Volpiani et al. :cite:p:`Volpiani2020` in viscous units 
10. :math:`u^+,\quad` mean streamwise velocity in viscous units
11. :math:`u_{VD}^+,\quad` mean streamwise velocity transformed according to van Driest :cite:p:`vanDriest1955` in viscous units
12. :math:`u_{TL}^+,\quad` mean streamwise velocity transformed according to Trettel & Larsson :cite:p:`Trettel2016` in viscous units
13. :math:`u_{V}^+,\quad` mean streamwise velocity transformed according to Volpiani *et al.* :cite:p:`Volpiani2020` in viscous units
14. :math:`u_{H}^+,\quad` mean streamwise velocity transformed according to Hasan *et al.* :cite:p:`hasan_23` in viscous units
15. :math:`\overline{\tau}_{11}/\tau_w,\quad` normal Reynolds stress component 11, scaled by density, in viscous units
16. :math:`\overline{\tau}_{22}/\tau_w,\quad` normal Reynolds stress component 22, scaled by density, in viscous units 
17. :math:`\overline{\tau}_{33}/\tau_w,\quad` normal Reynolds stress component 33, scaled by density, in viscous units
18. :math:`\overline{\tau}_{12}/\tau_w,\quad` Reynolds shear stress component 12, scaled by density, in viscous units
19. :math:`\overline{\rho}/\rho_w,\quad` mean density normalized by bulk density 
20. :math:`\overline{\rho}_{rms}/(\rho_w\gamma M_\tau^2),\quad` Density rms normalized by wall density and friction Mach number 
21. :math:`\overline{T_{rms}}/(\rho_w\gamma M_\tau^2),\quad` Temperature rms normalized by wall temperature and friction Mach number 
22. :math:`\overline{p_{rms}}/\tau_w,\quad` pressure rms normalized by wall shear stress

&&&&&&&&&&&&&&&&&&&&&
channstat_global.prof
&&&&&&&&&&&&&&&&&&&&&

The file ``channstat_global.prof`` contains mean profiles of channel flow in the following format:
1. :math:`y/h,\quad` wall-normal coordinate normalized with the channel half width
2. :math:`\widetilde{u}/u_b,\quad` Favre-averaged streamwise velocity component 
3. :math:`\overline{u}/u_b,\quad`  Reynolds-averaged averaged streamwise velocity component 
4. :math:`\overline{\tau}_{11}/\tau_w,\quad` normal Reynolds stress component 11, scaled by density, in viscous units
5. :math:`\overline{\tau}_{22}/\tau_w,\quad` normal Reynolds stress component 22, scaled by density, in viscous units 
6. :math:`\overline{\tau}_{33}/\tau_w,\quad` normal Reynolds stress component 33, scaled by density, in viscous units
7. :math:`\overline{\tau}_{12}/\tau_w,\quad` Reynolds shear stress component 12, scaled by density, in viscous units



^^^^^^^^^^^^^^^^
Boundary layer
^^^^^^^^^^^^^^^^

Make sure that the file `postpro.ini` is present in the run folder and all the parameters have been set correctly.

Run the post-processing tool by typing: 

.. code-block:: console

   $ ./postpro.exe

The post-processing routine will create the folder ``POSTPRO``, containing the files ``cf.dat`` and ``stat_nnnnn.dat``,
where ``nnnnn`` is the global i-index.

&&&&&&&&&&&&&&&&
cf.dat
&&&&&&&&&&&&&&&&

The file ``cf.dat`` contains the boundary layer characteristics as a function of the streamwise direction:

1. :math:`x/\delta_0,\quad` streamwise coordinate normalized by inflow boundary layer thickness
2. :math:`\delta_{99}/{\delta_{99}}_{in},\quad` boundary layer thickness
3. :math:`\delta^*,\quad` displacement thickness
4. :math:`\theta^*,\quad` momentum thickness
5. :math:`\delta_i^*,\quad` incompressible displacement thickness
6. :math:`\theta_i^*,\quad` incompressible momentum thickness
7. :math:`H,\quad` shape factor
8. :math:`H_i,\quad` incompressible shape factor
9. :math:`\rho_w/\rho_{\infty},\quad` Wall density
10. :math:`T_w/T_\infty,\quad` Wall temperature
11. :math:`p_w/p_\infty,\quad` Wall pressure
12. :math:`p_{rms}/\tau_w,\quad` Wall pressure rms
13. :math:`u_\tau/u_\infty,\quad` friction velocity
14. :math:`Cf=\overline{\tau}_w/(\rho_w U_\infty^2),\quad` friction coefficient
15. :math:`Cf_i=\overline{\tau}_w/(\rho_w U_\infty^2),\quad` incompressible friction coefficient, based on Van Driest II transformation :cite:p:`vanDriest1956`
16. :math:`Re_{\delta_{99}}=u_\inf\delta_{99}/\nu_\infty,\quad` Reynolds number based on the boundary layer thickness
17. :math:`Re_{\theta}=u_\inf\theta/\nu_\infty,\quad` Reynolds number based on the momentum thickness
18. :math:`Re_{\delta_2}=\rho_\inf u_\inf\theta/\mu_w,\quad` Reynolds number based on the momentum thickness and wall viscosity
19. :math:`Re_\tau=\delta_{99}/\delta_v,\quad` friction Reynolds number
20. :math:`B_q=q_w/(\rho_wC_pu_\tau T_w),\quad` heat flux coefficient
21. :math:`c_h=q_w/[\rho_wC_pu_\tau (T_w-T_r)],\quad` Stanton number

&&&&&&&&&&&&&&&&
stat_nnnnn.dat
&&&&&&&&&&&&&&&&

The files ``stat_nnnnn.dat`` contain the boundary layer profiles in the following format:

1. :math:`y/{\delta_{99}}_{in},\quad` wall-distance normalized by boundary layer thickness at the inflow
2. :math:`\overline{\rho}/\overline{\rho}_\infty,\quad` mean density 
3. :math:`\widetilde{u}/u_0,\quad` mean streamwise velocity 
4. :math:`\widetilde{v}/u_0,\quad` mean wall-normal velocity 
5. :math:`\widetilde{T}/T_\infty,\quad` Mean temperature
6. :math:`\overline{p}/p_\infty,\quad` Mean pressure
7. :math:`\overline{\mu}/\mu_w,\quad` Mean viscosity normalized by the wall viscosity
8. :math:`y/\delta_{99},\quad` wall-distance normalized by local boundary layer thickness 
9. :math:`y^+,\quad` wall-distance in viscous units
10. :math:`y_{TL},\quad` wall-distance transformed according to Trettel & Larsson :cite:p:`Trettel2016`, in viscous units
11. :math:`y_V,\quad` wall-distance transformed according to Volpiani *el al.* :cite:p:`Volpiani2020`, in viscous units
12. :math:`\widetilde{u}^+,\quad` streamwise velocity in viscous units
13. :math:`u_{VD}^+,\quad` streamwise velocity transformed according to van Driest :cite:p:`vanDriest1955`, in viscous units
14. :math:`u_{TL}^+,\quad` mean streamwise velocity transformed according to Trettel & Larsson :cite:p:`Trettel2016`, in viscous units
15. :math:`u_{V}^+,\quad` mean streamwise velocity transformed according to Volpiani *et al.* :cite:p:`Volpiani2020`, in viscous units
16. :math:`u_{G}^+,\quad` mean streamwise velocity transformed according to Griffin *et al.* :cite:p:`griffin_21`, in viscous units
17. :math:`u_{H}^+,\quad` mean streamwise velocity transformed according to Hasan *et al.* :cite:p:`hasan_23`, in viscous units
18. :math:`y^+du_{VD}^+/dy_{VD}^+,\quad` van Driest indicator function
19. :math:`y_{TL}^+du_{TL}^+/dy_{TL}^+,\quad` Trettel & Larsson log indicator function
20. :math:`y_V^+du_{V}^+/dy_V^+,\quad` Volpiani log indicator function
21. :math:`y_G^+du_{G}^+/dy_G^+,\quad` Griffin *et al.* log indicator function
22. :math:`y_H^+du_{H}^+/dy_H^+,\quad` Hasan *et al.* log indicator function
23. :math:`\overline{\tau}_{11}/\tau_w,\quad` normal Reynolds stress component 11, scaled by density, in viscous units
24. :math:`\overline{\tau}_{22}/\tau_w,\quad` normal Reynolds stress component 22, scaled by density, in viscous units 
25. :math:`\overline{\tau}_{33}/\tau_w,\quad` normal Reynolds stress component 33, scaled by density, in viscous units
26. :math:`\overline{\tau}_{12}/\tau_w,\quad` Reynolds shear stress component 12, scaled by density, in viscous units
27. :math:`\rho_{rms}/(\rho_w\gamma M_\tau^2),\quad` density rms
28. :math:`T_{rms}/(T_w\gamma M_\tau^2),\quad` temperature rms
29. :math:`p_{rms}/\tau_w,\quad` pressure rms in wall units 


^^^^^^^^^^^^^^^^^^^^^
Curved boundary layer
^^^^^^^^^^^^^^^^^^^^^

Make sure that the file `postpro.ini` is present in the run folder and all the parameters have been set correctly.

Run the post-processing tool by typing: 

.. code-block:: console

   $ ./postpro.exe

The post-processing routine will create the folder ``POSTPRO``, containing the files ``cf.dat`` and ``stat_nnnnn.dat``,
where ``nnnnn`` is the global i-index.

&&&&&&&&&&&&&&&&
cf.dat
&&&&&&&&&&&&&&&&

The file ``cf.dat`` contains the boundary layer characteristics as a function of the streamwise direction:

1. :math:`x/\delta_0,\quad` x-coordinate of the wall, normalized by inflow boundary layer thickness
2. :math:`y/\delta_0,\quad` y-coordinate of the wall, normalized by inflow boundary layer thickness
3. :math:`\delta_{99}/{\delta_{99}}_{in},\quad` boundary layer thickness based on `0.99 u_\infty`
4. :math:`\delta/{\delta_{99}}_{in},\quad` boundary layer thickness based on vorticity magnitude
5. :math:`\delta^*,\quad` displacement thickness
6. :math:`\theta^*,\quad` momentum thickness
7. :math:`\delta_i^*,\quad` incompressible displacement thickness
8. :math:`\theta_i^*,\quad` incompressible momentum thickness
9. :math:`H,\quad` shape factor
10. :math:`H_i,\quad` incompressible shape factor
11. :math:`\rho_w/\rho_{\infty},\quad` Wall density
12. :math:`T_w/T_\infty,\quad` Wall temperature
13. :math:`p_w/p_\infty,\quad` Wall pressure
14. :math:`p_{rms}/\tau_w,\quad` Wall pressure rms
15. :math:`\delta_v,\quad` viscous length scale
16. :math:`u_\tau,\quad` friction velocity
17. :math:`\tau_w,\quad` wall shear stress
18. :math:`Cf=\overline{\tau}_w/(\rho_w U_\infty^2),\quad` friction coefficient
19. :math:`Cf_i=\overline{\tau}_w/(\rho_w U_\infty^2),\quad` incompressible friction coefficient, based on Van Driest II transformation :cite:p:`vanDriest1956`
20. :math:`u_e/u_\infty,\quad` Ratio between external velocity (`0.99u_\infty`) and nominal free-stream velocity
21. :math:`u_e/u_\infty,\quad` Ratio between external velocity (`u(\delta_{99})`) and nominal free-stream velocity
22. :math:`Re_{\delta_{99}}=u_\inf\delta_{99}/\nu_\infty,\quad` Reynolds number based on the boundary layer thickness
23. :math:`Re_{\theta}=u_\inf\theta/\nu_\infty,\quad` Reynolds number based on the momentum thickness
24. :math:`Re_{\delta_2}=\rho_\inf u_\inf\theta/\mu_w,\quad` Reynolds number based on the momentum thickness and wall viscosity
25. :math:`Re_\tau=\delta_{99}/\delta_v,\quad` friction Reynolds number
26. :math:`B_q=q_w/(\rho_wC_pu_\tau T_w),\quad` heat flux coefficient
27. :math:`c_h=q_w/[\rho_wC_pu_\tau (T_w-T_r)],\quad` Stanton number

&&&&&&&&&&&&&&&&
stat_nnnnn.dat
&&&&&&&&&&&&&&&&

The files ``stat_nnnnn.dat`` contain the boundary layer profiles in the following format:

1. :math:`y/{\delta_{99}}_{in},\quad` wall-distance normalized by boundary layer thickness at the inflow
2. :math:`\overline{\rho}/\overline{\rho}_\infty,\quad` mean density 
3. :math:`\widetilde{u}/u_0,\quad` mean Cartesian velocity in x-direction
4. :math:`\widetilde{v}/u_0,\quad` mean Cartesian velocity in y-direction
5. :math:`\widetilde{u}/u_0,\quad` mean wall-parallel velocity
6. :math:`\widetilde{v}/u_0,\quad` mean wall-normal velocity
7. :math:`\widetilde{T}/T_\infty,\quad` Mean temperature
8. :math:`\overline{p}/p_\infty,\quad` Mean pressure
9. :math:`\overline{\mu}/\mu_w,\quad` Mean dynamic viscosity normalized by the wall viscosity
10. :math:`y/\delta_{99},\quad` wall-distance normalized by local boundary layer thickness 
11. :math:`y^+,\quad` wall-distance in viscous units
12. :math:`y_{TL},\quad` wall-distance transformed according to Trettel & Larsson :cite:p:`Trettel2016`, in viscous units
13. :math:`y_V,\quad` wall-distance transformed according to Volpiani *el al.* :cite:p:`Volpiani2020`, in viscous units
14. :math:`\widetilde{u}^+,\quad` streamwise velocity in viscous units
15. :math:`u_{VD}^+,\quad` streamwise velocity transformed according to van Driest :cite:p:`vanDriest1955`, in viscous units
16. :math:`u_{TL}^+,\quad` mean streamwise velocity transformed according to Trettel & Larsson :cite:p:`Trettel2016`, in viscous units
17. :math:`u_{V}^+,\quad` mean streamwise velocity transformed according to Volpiani *et al.* :cite:p:`Volpiani2020`, in viscous units
18. :math:`u_{H}^+,\quad` mean streamwise velocity transformed according to Hasan *et al.* :cite:p:`hasan_23`, in viscous units
19. :math:`\overline{\tau}_{11}/\tau_w,\quad` normal Reynolds stress component 11, scaled by density, in viscous units
20. :math:`\overline{\tau}_{22}/\tau_w,\quad` normal Reynolds stress component 22, scaled by density, in viscous units 
21. :math:`\overline{\tau}_{33}/\tau_w,\quad` normal Reynolds stress component 33, scaled by density, in viscous units
22. :math:`\overline{\tau}_{12}/\tau_w,\quad` Reynolds shear stress component 12, scaled by density, in viscous units
23. :math:`\rho_{rms}/(\rho_w\gamma M_\tau^2),\quad` density rms
24. :math:`T_{rms}/(T_w\gamma M_\tau^2),\quad` temperature rms
25. :math:`p_{rms}/\tau_w,\quad` pressure rms in wall units 

^^^^^^^^^^^^^^^^
Airfoil
^^^^^^^^^^^^^^^^

Make sure that the file `postpro.ini` is present in the run folder and all the parameters have been set correctly.

Run the post-processing tool by typing: 

.. code-block:: console

   $ ./postpro.exe

The post-processing routine will create the folder ``POSTPRO``, containing the files ``avg_forces.dat``, ``bl_pressure.dat`` ``bl_suction.dat`` and ``stat_nnnnn.dat``,
where ``nnnnn`` is the global i-index.

&&&&&&&&&&&&&&&&
avg_coeff.dat
&&&&&&&&&&&&&&&&

The file ``avg_coeff.dat`` contains the boundary layer characteristics as a function of the streamwise direction:

1. :math:`c_L=L/(0.5\rho_\infty u_\infty^2)` Lift coefficient per unit chord
2. :math:`c_D=D/(0.5\rho_\infty u_\infty^2)` Drag coefficient per unit chord
3. :math:`c_p=(\oint_s p\mathbf{n} \cdot \mathrm{d}\mathbf{s})/(0.5\rho_\infty u_\infty^2)` Integrated wall pressure normalized by the dynamic pressure
4. :math:`c_f=(\oint_s \boldsymbol{\tau}_w\cdot \mathrm{d}\mathbf{s})/(0.5\rho_\infty u_\infty^2)` Integrated wall-shear stress normalized by the dynamic pressure

&&&&&&&&&&&&&&&&
bl_suction.dat/bl_pressure.dat
&&&&&&&&&&&&&&&&

The files ``bl_pressure/bl_suction.dat`` contain the airfoil boundary layer characteristics as a function of the streamwise direction:

1. :math:`x/\delta_0,\quad` x-coordinate of the wall, normalized by inflow boundary layer thickness
2. :math:`y/\delta_0,\quad` y-coordinate of the wall, normalized by inflow boundary layer thickness
3. :math:`\delta_{99}/{\delta_{99}}_{in},\quad` boundary layer thickness based on `0.99 u_\infty`
4. :math:`\delta/{\delta_{99}}_{in},\quad` boundary layer thickness based on vorticity magnitude
5. :math:`\delta^*,\quad` displacement thickness
6. :math:`\theta^*,\quad` momentum thickness
7. :math:`\delta_i^*,\quad` incompressible displacement thickness
8. :math:`\theta_i^*,\quad` incompressible momentum thickness
9. :math:`H,\quad` shape factor
10. :math:`H_i,\quad` incompressible shape factor
11. :math:`\rho_w/\rho_{\infty},\quad` Wall density
12. :math:`T_w/T_\infty,\quad` Wall temperature
13. :math:`p_w/p_\infty,\quad` Wall pressure
14. :math:`p_{rms}/\tau_w,\quad` Wall pressure rms
15. :math:`\delta_v,\quad` viscous length scale
16. :math:`u_\tau,\quad` friction velocity
17. :math:`\tau_w,\quad` wall shear stress
18. :math:`Cf=\overline{\tau}_w/(\rho_w U_\infty^2),\quad` friction coefficient
19. :math:`Cf_i=\overline{\tau}_w/(\rho_w U_\infty^2),\quad` incompressible friction coefficient, based on Van Driest II transformation :cite:p:`vanDriest1956`
20. :math:`c_p,\quad` Pressure coefficient
21. :math:`u_e/u_\infty,\quad` Ratio between external velocity (`0.99u_\infty`) and nominal free-stream velocity
22. :math:`u_{99}/u_\infty,\quad` Ratio between external velocity (`u(\delta_{99})`) and nominal free-stream velocity
23. :math:`Re_{\delta_{99}}=u_\inf\delta_{99}/\nu_\infty,\quad` Reynolds number based on the boundary layer thickness
24. :math:`Re_{\theta}=u_\inf\theta/\nu_\infty,\quad` Reynolds number based on the momentum thickness
25. :math:`Re_{\delta_2}=\rho_\inf u_\inf\theta/\mu_w,\quad` Reynolds number based on the momentum thickness and wall viscosity
26. :math:`Re_\tau=\delta_{99}/\delta_v,\quad` friction Reynolds number
27. :math:`B_q=q_w/(\rho_wC_pu_\tau T_w),\quad` heat flux coefficient
28. :math:`c_h=q_w/[\rho_wC_pu_\tau (T_w-T_r)],\quad` Stanton number
29. :math:`j_\omega,\quad` index of the wall-normal mesh coordinate corresponding to the boundary layer thickness based on the vorticity criterion
30. :math:`j_\omega,\quad` index of the wall-normal mesh coordinate corresponding to the boundary layer thickness based on :math:`u_{99}`

&&&&&&&&&&&&&&&&
stat_nnnnn.dat
&&&&&&&&&&&&&&&&

The files ``stat_nnnnn.dat`` contain the boundary layer profiles in the following format:

1. :math:`y/{\delta_{99}}_{in},\quad` wall-distance normalized by boundary layer thickness at the inflow
2. :math:`\overline{\rho}/\overline{\rho}_\infty,\quad` mean density 
3. :math:`\widetilde{u}/u_0,\quad` mean Cartesian velocity in x-direction
4. :math:`\widetilde{v}/u_0,\quad` mean Cartesian velocity in y-direction
5. :math:`\widetilde{u_\parallel/u_0,\quad` mean wall-parallel velocity
6. :math:`\widetilde{v}_\perp/u_0,\quad` mean wall-normal velocity
7. :math:`\widetilde{T}/T_\infty,\quad` Mean temperature
8. :math:`\overline{p}/p_\infty,\quad` Mean pressure
9. :math:`\overline{\mu}/\mu_w,\quad` Mean dynamic viscosity normalized by the wall viscosity
10. :math:`y/\delta_{99},\quad` wall-distance normalized by local boundary layer thickness 
11. :math:`y^+,\quad` wall-distance in viscous units
12. :math:`y_{TL},\quad` wall-distance transformed according to Trettel & Larsson :cite:p:`Trettel2016`, in viscous units
13. :math:`y_V,\quad` wall-distance transformed according to Volpiani *el al.* :cite:p:`Volpiani2020`, in viscous units
14. :math:`\widetilde{u}^+,\quad` streamwise velocity in viscous units
15. :math:`u_{VD}^+,\quad` streamwise velocity transformed according to van Driest :cite:p:`vanDriest1955`, in viscous units
16. :math:`u_{TL}^+,\quad` mean streamwise velocity transformed according to Trettel & Larsson :cite:p:`Trettel2016`, in viscous units
17. :math:`u_{V}^+,\quad` mean streamwise velocity transformed according to Volpiani *et al.* :cite:p:`Volpiani2020`, in viscous units
18. :math:`u_{H}^+,\quad` mean streamwise velocity transformed according to Hasan *et al.* :cite:p:`hasan_23`, in viscous units
19. :math:`\overline{\tau}_{11}/\tau_w,\quad` normal Reynolds stress component 11, scaled by density, in viscous units
20. :math:`\overline{\tau}_{22}/\tau_w,\quad` normal Reynolds stress component 22, scaled by density, in viscous units 
21. :math:`\overline{\tau}_{33}/\tau_w,\quad` normal Reynolds stress component 33, scaled by density, in viscous units
22. :math:`\overline{\tau}_{12}/\tau_w,\quad` Reynolds shear stress component 12, scaled by density, in viscous units
23. :math:`\rho_{rms}/(\rho_w\gamma M_\tau^2),\quad` density rms
24. :math:`T_{rms}/(T_w\gamma M_\tau^2),\quad` temperature rms
25. :math:`p_{rms}/\tau_w,\quad` pressure rms in wall units 
